package com.example.zzbmi.readapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXCEL_BEAN".
*/
public class ExcelBeanDao extends AbstractDao<ExcelBean, Long> {

    public static final String TABLENAME = "EXCEL_BEAN";

    /**
     * Properties of entity ExcelBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property Content = new Property(2, String.class, "content", false, "content");
        public final static Property Result = new Property(3, String.class, "result", false, "result");
        public final static Property SelectA = new Property(4, String.class, "selectA", false, "selectA");
        public final static Property SelectB = new Property(5, String.class, "selectB", false, "selectB");
        public final static Property SelectC = new Property(6, String.class, "selectC", false, "selectC");
        public final static Property SelectD = new Property(7, String.class, "selectD", false, "selectD");
        public final static Property SelectE = new Property(8, String.class, "selectE", false, "selectE");
        public final static Property FullLetter = new Property(9, String.class, "fullLetter", false, "fullLetter");
        public final static Property ShortLetter = new Property(10, String.class, "shortLetter", false, "shortLetter");
    }


    public ExcelBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExcelBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXCEL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"type\" TEXT," + // 1: type
                "\"content\" TEXT," + // 2: content
                "\"result\" TEXT," + // 3: result
                "\"selectA\" TEXT," + // 4: selectA
                "\"selectB\" TEXT," + // 5: selectB
                "\"selectC\" TEXT," + // 6: selectC
                "\"selectD\" TEXT," + // 7: selectD
                "\"selectE\" TEXT," + // 8: selectE
                "\"fullLetter\" TEXT," + // 9: fullLetter
                "\"shortLetter\" TEXT);"); // 10: shortLetter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXCEL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExcelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
 
        String selectA = entity.getSelectA();
        if (selectA != null) {
            stmt.bindString(5, selectA);
        }
 
        String selectB = entity.getSelectB();
        if (selectB != null) {
            stmt.bindString(6, selectB);
        }
 
        String selectC = entity.getSelectC();
        if (selectC != null) {
            stmt.bindString(7, selectC);
        }
 
        String selectD = entity.getSelectD();
        if (selectD != null) {
            stmt.bindString(8, selectD);
        }
 
        String selectE = entity.getSelectE();
        if (selectE != null) {
            stmt.bindString(9, selectE);
        }
 
        String fullLetter = entity.getFullLetter();
        if (fullLetter != null) {
            stmt.bindString(10, fullLetter);
        }
 
        String shortLetter = entity.getShortLetter();
        if (shortLetter != null) {
            stmt.bindString(11, shortLetter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExcelBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(4, result);
        }
 
        String selectA = entity.getSelectA();
        if (selectA != null) {
            stmt.bindString(5, selectA);
        }
 
        String selectB = entity.getSelectB();
        if (selectB != null) {
            stmt.bindString(6, selectB);
        }
 
        String selectC = entity.getSelectC();
        if (selectC != null) {
            stmt.bindString(7, selectC);
        }
 
        String selectD = entity.getSelectD();
        if (selectD != null) {
            stmt.bindString(8, selectD);
        }
 
        String selectE = entity.getSelectE();
        if (selectE != null) {
            stmt.bindString(9, selectE);
        }
 
        String fullLetter = entity.getFullLetter();
        if (fullLetter != null) {
            stmt.bindString(10, fullLetter);
        }
 
        String shortLetter = entity.getShortLetter();
        if (shortLetter != null) {
            stmt.bindString(11, shortLetter);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExcelBean readEntity(Cursor cursor, int offset) {
        ExcelBean entity = new ExcelBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // result
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // selectA
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // selectB
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // selectC
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // selectD
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // selectE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fullLetter
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // shortLetter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExcelBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSelectA(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSelectB(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSelectC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSelectD(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSelectE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFullLetter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShortLetter(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExcelBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExcelBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExcelBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
